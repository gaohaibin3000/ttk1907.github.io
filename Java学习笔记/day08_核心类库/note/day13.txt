1.简答题
  简述5种常见的异常，要求写出英文名称和中文名称。

2.编程题
  使用两种方式实现将字符串"1234"转换为整数1234.

作业：
-----------------------------------------------------------------------------
今天内容：
   (1)集合框架
   (2)Collection集合  
   (3)List集合
   (4)泛型机制
   (5)Queue集合

1.集合(容器)框架
1.1 集合的由来
   当需要在程序中记录单个数据内容时，则声明一个变量即可；
   当需要在程序中记录多个类型相同的数据内容时，则声明一个一维数组即可；
   当需要在程序中记录多个类型不同的数据内容时，则构造一个对象即可；
   当需要在程序中记录多个类型相同的对象时，则声明一个对象数组即可；
   当需要在程序中记录多个类型不同的对象时，则声明一个集合即可；
   
1.2 集合框架结构
  在Java语言中集合框架的顶层是：java.util.Collection集合 和 java.util.Map集合
  其中Collection集合中操作元素的基本单位是：单个元素。
  其中Map集合中操作元素的基本单位是：单对元素。

  在以后的开发中很少直接使用Collection集合，而是使用该集合的子集合：List集合、Queue集合、Set集合等。

2.Collection集合(重点)
2.1 基本概念
   java.util.Collection集合是集合框架的根接口，其它接口是该接口的子接口。

2.2 常用的方法(练熟、记住)
  
3.List集合(重中之重)
3.1 基本概念
  java.util.List集合是Collection集合的子集合，该集合中元素有先后次序且允许重复
  该集合的主要实现类有：ArrayList类、 LinkedList类、Stack类、Vector类等
  其中ArrayList类的底层是采用动态数组进行数据管理，访问方便，增删不方便。
  其中LinkedList类的底层是采用链表进行数据管理，增删方便，访问不方便。
  其中Stack类主要用于描述具有后进先出特征的数据结构，叫做栈，last in first out
该类的底层是采用数组进行数据的管理。
  其中Vector类的底层采用数组进行数据的管理，与ArrayList类相比属于线程安全的类，因此效率比较低，在以后的开发中推荐使用ArrayList类取代之。

3.2 常用的方法(练熟、记住)

4.泛型机制(重点)
4.1 基本概念
   通常情况下集合中可以存放不同类型的对象，本质上是将这些对象全部看做Object类型放入的，因此从集合中取出元素时也是Object类型，为了表达元素最真实的数据类型就需要强制类型转换，而强制类型转换可能发生类型转换异常。
   为了避免上述错误的发生，从jdk1.5开始提出泛型机制，也就是在集合名称的右侧使用<数据类型>的方式明确要求该集合可以存放的元素类型，若放入其它类型则编译报错
如：
   List lt1 = new LinkedList();   - 可以放入任意类型对象，取出麻烦
   List<String> lt1 = new LinkedList<String>(); - 只能放入String类型，取出方便

4.2 原理分析
   泛型的本质就是参数化类型，也就是让数据类型作为参数传递，集合定义中的E相当于形式参数负责占位，而使用集合时<>中的数据类型相当于实际参数负责给形式参数初始化，当初始化完毕后所有E被替换为实际参数表示的类型进行使用。
   由于E支持的数据类型非常广泛，因此得名为"泛型".
如：
   // 其中i叫做形式参数，负责占位                其中E叫做形式参数，负责占位
   // int i = 5;                                 E = String;
   // int i = 10;                                E = Student;
   public void show(int i) {                     public interface List<E> {
       ...                                            ...
   }                                             }
   // 其中5叫做实际参数，用于给形式参数初始化    其中String叫做实际参数
   show(5);                                      List<String> lt1 = ...;
   show(10);                                     List<Student> lt2 = ...;

作业：
   1.复习和练习集合的常用方法并进行整理。
   2.查询java.util.Stack类，实现将11 22 33 44 55依次入栈再出栈。









    





